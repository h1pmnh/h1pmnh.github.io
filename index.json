[{"body":"","link":"https://h1pmnh.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://h1pmnh.github.io/tags/advanced/","section":"tags","tags":null,"title":"advanced"},{"body":"Summary Many new bug bounty hunters will blindly rely on the output of tools to magically find them bugs. As most experienced hunters know, the key to long-term success is to understand how to effectively use the many great tools and fine-tune these tools to achieve results in the form of valuable, challenging bugs.\nSince I joined the Synack Red Team, I have been digging into sqlmap and the intricacies involved in finding SQL injections \u0026quot;in the wild\u0026quot;. This will be the first of hopefully several posts on how to use sqlmap to work around challenging real-world scenarios where SQL injections exist. I hope you find this useful in your research!\nOn Manual Testing In almost all cases I never run sqlmap without first manually confirming the presence of a vulnerability! Don't be an irresponsible hunter - do your research manually or with low-impact scanning first!\nScenario In this scenario I was able to find a SQL injection vulnerability through source code auditing of the application I was testing. The application took a certain parameter and issued 2 SQL queries with it. The first query looked like this (partial query):\n1... select OID from pg_namespace where nspname=\u0026#39;{parameter}\u0026#39; ... If this query succeeded (returned a row), the code would issue a 2nd query as below:\n1select distinct object from {parameter} ... If the first query did not return a row, the code would instead throw a Python error:\n1AttributeError: \u0026#39;NoneType\u0026#39; object has no attribute So this means that in order to pass both queries the {parameter} needed to be a valid string in the first query and a valid table or view name in the 2nd query! Unfortunately this is inherently incompatible with the need to be able to construct a valid boolean true/false expression. I had to find another approach.\nThe Approach I determined that it was not going to be possible to get a payload that would successfully pass both queries, therefore I determined that I had to construct a payload that would satisfy the first query enough to generate a true/false result. \u0026quot;True\u0026quot; would mean the code would successfully execute the first query, and fail in the 2nd query. \u0026quot;False\u0026quot; would mean the code would successfully execute the first query, but because a row was not returned from the query, it would generate the AttributeError message. This got me set up with the \u0026quot;True\u0026quot; and \u0026quot;False\u0026quot; conditions I needed for sqlmap to work properly:\n \u0026quot;True\u0026quot;: Error message contains select distinct object from \u0026quot;False\u0026quot;: Error message contains AttributeError: 'NoneType'  One other Wrinkle Because of the nature of the code involved, the SQL injection payload needed to be placed in the middle of the query parameter string in a specific location. Let's say the query parameter looked like this:\n1param=canary.bluebird The position of the SQL injection payload had to be here:\n1param=canary.bluebird 2^^ Basically, it had to be placed before the . character, in the middle of the string, in order for the first SQL query to successfully execute.\nValidating the Approach I tested this approach by the following query:\n1param=`cana\u0026#39;||(select/**/\u0026#39;r\u0026#39;/**/where/**/1=1)||\u0026#39;y.bluebird` I confirmed this corresponded to the \u0026quot;true\u0026quot; result (getting past the first SQL query and a syntax error on the 2nd). Changing the 1=1 to 0=1 confirmed the behavior of the \u0026quot;false\u0026quot; result (AttributeError). Great!\nNow, on to getting sqlmap to follow this same manual approach.\nA Couple more Wrinkles A few other wrinkles came up in my manual testing:\n Both \u0026quot;true\u0026quot; and \u0026quot;false\u0026quot; resulted in an error page with HTTP status 500 The URL parameter had to be issued without URL encoding (i.e. ' instead of %27) Because of this, the inclusion of space characters would break the request, so they had to be replaced with comments /**/  I had to make sure that sqlmap followed these as well.\nWrangling sqlmap Let's get the easy stuff out of the way first:\n Don't encode URL parameters: use the --skip-urlencode flag Change spaces to comments: use the --tamper=space2comment flag to invoke this tamper script Tamper scripts modify the payload before it is sent to the target site! Match HTTP code 500 as part of the \u0026quot;true\u0026quot; result: use the --code=500 flag As an interesting side note: without this, sqlmap will assume a non-2xx status code is a failure (neither true nor false) and will ignore the result  Now we need to get the positioning of the payload correct. We can use the --prefix and -suffix flags for this as follows:\n1--prefix=\u0026#34;cana\u0026#39;||\u0026#34; --suffix=\u0026#34;||\u0026#39;y.bluebird\u0026#34; If you are following along, you might wonder where the r character in canary went. Remember the injection point needs to be before the . in the valid parameter string. Remember a valid query \u0026quot;true/false\u0026quot; will look like this:\n1param=`cana\u0026#39;||(select/**/\u0026#39;r\u0026#39;/**/where/**/1=1)||\u0026#39;y.bluebird` You can see the r is being returned from the inner select statement if the where clause evaluates to \u0026quot;true\u0026quot;. If it evaluates to \u0026quot;false\u0026quot;, no value is returned, and we know that the parameter value of canay.bluebird (no r) will return 0 rows. This type of SQL injection corresponds to the sqlmap payload with \u0026quot;original value\u0026quot; in the name.\n Tip: sqlmap has two types of payloads: one where the boolean condition returns the original value inline in the query, and the other where the boolean result is appended to the original value (the classic AND 1=1 type of payload)  In this case, trying to get an AND 1=1 type payload in the middle of our parameter would make no sense at all! Therefore we're looking only for blind boolean payloads that use the original value in the constructed query string.\nThe final piece of the puzzle is helping sqlmap determine a true vs false result. In this case we use the --string parameter to suggest to sqlmap text that is guaranteed only to appear when the boolean value is true. In our analysis we determined the displayed error message will contain the string select distinct object from.\nPutting it all together, the final sqlmap command line looked like this:\n1...\u0026amp;param=r -p param --prefix=\u0026#34;cana\u0026#39;||\u0026#34; --suffix=\u0026#34;||\u0026#39;y.bluebird\u0026#34; --tamper space2comment --level=3 --risk=2 --string \u0026#34;select distinct object from ucon_p\u0026#34; --code=500 --dbms PostgreSQL --skip-urlencode --no-escape --no-cast --banner --technique=B With this combination of parameters I was able to translate my manual confirmation of the SQLi with the automatic data gathering magic of sqlmap\nFeedback? Hopefully this article was helpful in outlining how to reason through a complex SQL injection vulnerability. If you have any comments or want to collaborate on a report feel free to DM me on Twitter, I'm always open to collaboration with trusted people.\nLinks A couple other resources that cover this sort of advanced sqlmap content well:\n https://cybr.com/ethical-hacking-archives/sqlmap-cheat-sheets-to-help-you-find-sql-injections/ https://thegreycorner.com/2017/01/05/exploiting-difficult-sql-injection.html  ","link":"https://h1pmnh.github.io/post/advanced-sqlmap-case-study-1/","section":"post","tags":["sqlmap","sqli","advanced"],"title":"Advanced sqlmap Case Study"},{"body":"","link":"https://h1pmnh.github.io/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://h1pmnh.github.io/tags/sqli/","section":"tags","tags":null,"title":"sqli"},{"body":"","link":"https://h1pmnh.github.io/tags/sqlmap/","section":"tags","tags":null,"title":"sqlmap"},{"body":"","link":"https://h1pmnh.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"Brief Bio I'm a software developer, architect, author by trade, with years of experience in software large (millions of users) and small startups and non-profits. Recently I took a more active role in a life-long hobby of playing with security, cryptography, and puzzles into a full-on passion for security research, bug bounty, and the like.\nMy Stats I started bug bounty as a hobby in Sep 2020. I've hacked on 3 major platforms, my profiles are linked below:\n HackerOne - ~3200 rep, 7.0 signal, 23.74 impact Bugcrowd - ~500 pts, 100% accuracy, 13 P1s Synack (SRT) - level 0x05  I actively hunted on HackerOne from Sep 2020-Aug 2021. During this time, I was in the top 10 on the US leaderboard, delivering critical and high findings on numerous private and public programs. Towards the end of the year I moved to Bugcrowd, as well as joined the Synack Red Team (SRT), where I perform my primary hunting today, currently maintaining a top 5 position on the global SRT leaderboard.\nMy focus areas are deep recon / research and P1/P2/P3 findings. I'm always happy to discuss techniques around these or collaborate with hackers - ping me on Twitter (@h1pmnh) or Discord (pmnh#8207). I haven't ever intentionally filed a P4/P5, so I can't really help you with questions about this class of bugs.\nWhy Read This Site? This simple site captures some stories and learnings on this journey. I hope you find it useful. I aim to publish once or twice monthly. My goal is to share interesting findings as well as some metrics and learnings as a relative newcomer to this field.\nThis site is not intended for people new to bug bounty, but instead targeting those looking to improve their craft, read more technical articles, and generally \u0026quot;talk shop\u0026quot;. In most cases I won't be explaining commonly Google-able terms and suggest you rely on the many great resources around the web for bug bounty basics.\nFeedback / Questions? Feel free to send any feebdack my way on Twitter, I can be reached at @h1pmnh - unfortunately my social media presence doesn't match my bug bounty platform names, sorry for any confusion :)\n","link":"https://h1pmnh.github.io/about/","section":"","tags":null,"title":"About"},{"body":"","link":"https://h1pmnh.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://h1pmnh.github.io/tags/index/","section":"tags","tags":null,"title":"index"},{"body":"","link":"https://h1pmnh.github.io/series/","section":"series","tags":null,"title":"Series"}]