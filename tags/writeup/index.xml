<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writeup on A developer's notes in the world of security research and bug bounty, by pmnh</title><link>https://www.pmnh.site/tags/writeup/</link><description>Recent content in writeup on A developer's notes in the world of security research and bug bounty, by pmnh</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© 2023, pmnh; all rights reserved.</copyright><lastBuildDate>Thu, 29 Jun 2023 00:00:00 -0400</lastBuildDate><atom:link href="https://www.pmnh.site/tags/writeup/index.xml" rel="self" type="application/rss+xml"/><item><title>Bug Writeup: Stored XSS to Account Takeover (ATO) via GraphQL API</title><link>https://www.pmnh.site/post/witeup_lhe_graphql_stored_xss/</link><pubDate>Thu, 29 Jun 2023 00:00:00 -0400</pubDate><guid>https://www.pmnh.site/post/witeup_lhe_graphql_stored_xss/</guid><description>
Stored XSS to Account Takeover (ATO) via GraphQL API Late last year on HackerOne during an LHE (this is only important later due to an extreme time crunch), I found an extremely challenging vulnerability on a major brand's web site involving several layers of exploitation ultimately resulting in a stored XSS payload that was able to take over a victim's account simply by visiting a specific, innocuous page on the brand's main website (www.</description></item><item><title>Bug Writeup: RCE via SSTI on Spring Boot Error Page with Akamai WAF Bypass</title><link>https://www.pmnh.site/post/writeup_spring_el_waf_bypass/</link><pubDate>Sun, 04 Dec 2022 00:00:00 -0400</pubDate><guid>https://www.pmnh.site/post/writeup_spring_el_waf_bypass/</guid><description>
Summary This writeup talks about a successful collab that I did with Dark9T (@UsmanMansha) on a private program hosted on Bugcrowd. We ended up able to bypass Akamai WAF and achieve Remote Code Execution (P1) using Spring Expression Language injection on an application running Spring Boot. This was the 2nd RCE via SSTI we found on this program, after the 1st one, the program implemented a WAF which we were able to bypass in a different part of the application.</description></item></channel></rss>